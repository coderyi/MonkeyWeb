{"version":3,"sources":["components/Navbar.tsx","components/PageHeader.tsx","components/UserList.tsx","pages/UserRankPage.tsx","pages/AboutPage.tsx","components/RepositoryList.tsx","pages/RepositoryRankPage.tsx","components/PlainLineList.tsx","pages/LanguagePage.tsx","pages/CountryPage.tsx","pages/CityPage.tsx","App.tsx","index.tsx"],"names":["Navbar","className","to","id","selectedRegion","PageHeader","showRegion","onSelectRegion","useState","country","setCountry","city","setCity","useEffect","savedCoutry","localStorage","getItem","savedCity","selectRegionHandler","event","preventDefault","setItem","onClick","e","UserList","items","onSelect","length","map","item","index","src","avatarUrl","title","itemArray","currentLocation","currentLanguage","UserRankPage","setItems","fetchDataHandler","then","saved","document","addEventListener","onScrollHandle","a","list","start","page","language","location","url","fetch","response","json","myJson","i","newItem","login","avatar_url","concat","windowHeight","window","innerHeight","documentElement","offsetHeight","body","html","docHeight","Math","max","scrollHeight","clientHeight","pageYOffset","AboutPage","history","useHistory","push","RepositoryList","stargazers_count","forks_count","description","RepositoryPage","full_name","owner","created_at","PlainLineList","key","LanguagePage","setupHandler","citys","App","component","path","exact","RepositoryRankPage","CountryPage","CityPage","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1df58b20.chunk.js","sourcesContent":["import React from 'react'\nimport {NavLink} from 'react-router-dom'\n\nconst Navbar: React.FC = () => (\n    <nav>\n        <div className='nav-wrapper blue darken-2 ph1'>\n            <NavLink to='/monkeyweb'>\n                Monkey for GitHub\n            </NavLink>\n            <ul id='nav-mobile' className='right hide-on-med-and-down'>\n                <li>\n                    <NavLink to='/monkeyweb'>User Rank</NavLink>\n                </li>\n                <li>\n                    <NavLink to='/monkeyweb/repository'>Repository Rank</NavLink>\n                </li>\n                <li>\n                    <NavLink to='/monkeyweb/about'>About</NavLink>\n                </li>\n            </ul>\n        </div>\n    </nav>\n)\n\nexport default Navbar\n","import React, {useEffect, useState} from 'react'\nimport {BrowserRouter, Switch, Route, NavLink} from 'react-router-dom'\nimport './PageHeader.css';\n\ninterface PageHeaderProps {\n    showRegion: Boolean\n    onSelectRegion: (title: string) => void\n}\n\nvar selectedRegion: string = 'world'\n\nconst PageHeader: React.FC<PageHeaderProps> = ({showRegion, onSelectRegion}) => {\n    const [title, setTitle] = useState<string>('')\n    const [country, setCountry] = useState<string>('')\n    const [city, setCity] = useState<string>('')\n\n    useEffect(() => {\n        let savedCoutry = localStorage.getItem('country') || ''\n        setCountry(savedCoutry)\n        let savedCity = localStorage.getItem('city') || ''\n        setCity(savedCity)\n    }, [])\n\n    const selectRegionHandler = (event: React.MouseEvent, id: string) => {\n        event.preventDefault()\n        localStorage.setItem('region', id)\n        selectedRegion = id\n        onSelectRegion(id)\n    }\n\n    return (\n        <div className='input-field mt2'>\n            <div>\n                <NavLink to='/monkeyweb/language'> Language </NavLink>\n                <NavLink to='/monkeyweb/country'> Country </NavLink>\n            </div>\n            {showRegion ?\n                <div>\n                    <label className={selectedRegion == 'world' ? 'region-label-highlight' : 'region-label'} onClick={e => selectRegionHandler(e, 'world')}>\n                        World\n                    </label>\n                    <label className={selectedRegion == 'country' ? 'region-label-highlight' : 'region-label'} onClick={e => selectRegionHandler(e, 'country')}>\n                        {country}\n                    </label>\n                    <label className={selectedRegion == 'city' ? 'region-label-highlight' : 'region-label'} onClick={e => selectRegionHandler(e, 'city')}>\n                        {city}\n                    </label>\n                </div>\n                : <div></div>}\n        </div>\n    )\n}\n\nexport default PageHeader\n","import React from 'react'\nimport {IUser} from '../models/Interfaces'\n\ntype UserListProps = {\n    items: IUser[]\n    onSelect: (item: number) => void\n}\n\nconst UserList: React.FC<UserListProps> = ({items, onSelect}) => {\n    const selectHandler = (event: React.MouseEvent, id: number) => {\n        event.preventDefault()\n        onSelect(id)\n    }\n\n    if (items.length === 0) {\n        return <p className='center'>Empty</p>\n    }\n\n    return (\n        <ul>\n            {items.map(item => (\n                <li\n                    className={`cell`}\n                >\n                    <label className='cell-label'>\n                        <span className='cell-index'>{item.index}</span>\n                        <img className='cell-img' src={item.avatarUrl}>\n                        </img>\n                        <span className='cell-name'>{item.title}</span>\n                    </label>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nexport default UserList\n","import React, {useEffect, useState} from 'react'\nimport PageHeader from '../components/PageHeader'\nimport UserList from '../components/UserList'\nimport {IUser} from '../models/Interfaces'\n\nvar itemArray: Array<IUser> = []\nvar currentRegion: string = 'world'\nvar currentLocation: string = ''\nvar currentLanguage: string = ''\nconst UserRankPage: React.FC = () => {\n    const [items, setItems] = useState<IUser[]>([])\n\n    useEffect(() => {\n        fetchDataHandler().then((saved) => {\n            setItems(saved)\n        })\n    }, [])\n\n    useEffect(() => {\n        document.addEventListener('scroll', onScrollHandle);\n    }, [])\n\n    const fetchDataHandler = async () => {\n        localStorage.setItem('fetchData', 'user')\n        var list: IUser[] = [];\n        var start = itemArray.length + 1;\n        var page = itemArray.length / 30 + 1\n        const language = localStorage.getItem('language') || 'Objective-C'\n        const country = localStorage.getItem('country') || 'china'\n        const city = localStorage.getItem('city') || 'beijing'\n\n        let location =''\n        let selectedRegion = localStorage.getItem('region') || 'world'\n        if (selectedRegion == 'city') {\n            location = city\n        } else if (selectedRegion == 'country') {\n            location = country\n        }\n        if (currentLocation != location || currentLanguage != language) {\n            start = 1\n            page = 1\n            itemArray = []\n        }\n        let url = 'https://api.github.com/search/users?q=location:'+location+'+language:'+language+'&sort=followers&order=desc&page='+page\n        if (selectedRegion == 'world') {\n            url = 'https://api.github.com/search/users?q=language:'+language+'&sort=followers&order=desc&page='+page\n        }\n        currentLocation = location\n        currentLanguage = language\n        const response = await fetch(url)\n        const myJson = await response.json();\n        let i:number;\n        for (i = 0; i < myJson.items.length; i++) {\n            var item = myJson.items[i]\n            let newItem: IUser = {\n                title: item.login,\n                avatarUrl: item.avatar_url,\n                index: i + start\n            }\n            list[i] = newItem\n          }\n        itemArray = itemArray.concat(list);\n        return itemArray\n    }\n\n    const selectRegionHandler = (title: string) => {\n        currentRegion = title\n        itemArray = []\n        fetchDataHandler().then((saved) => {\n            setItems(saved)\n        })\n    }\n\n    const selectCellHandler = (id: number) => {\n    }\n\n    const onScrollHandle = () => {\n        const windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\n        const body = document.body;\n        const html = document.documentElement;\n        const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n        const windowBottom = windowHeight + window.pageYOffset;\n        if (windowBottom >= docHeight) {\n            fetchDataHandler().then((saved) => {\n                setItems(saved)\n            })\n        }\n    }\n\n    return (\n        <>\n            <PageHeader onSelectRegion={selectRegionHandler}  showRegion={true}/>\n            <UserList\n                items={items}\n                onSelect={selectCellHandler}\n            />\n        </>\n    )\n}\n\nexport default UserRankPage\n","import React from 'react'\nimport {useHistory} from 'react-router-dom'\n\nconst AboutPage: React.FC = () => {\n    const history = useHistory()\n    return (\n        <>\n            <h2>Monkey</h2>\n            <p>\n                the rank of coders and repositories.\n            </p>\n            <button className='btn mt2 blue' onClick={() => history.push('/monkeyweb')}>\n                Go back\n            </button>\n        </>\n    )\n}\n\nexport default AboutPage\n","import React from 'react'\nimport {IRepository} from '../models/Interfaces'\n\ntype RepositoryListProps = {\n    items: IRepository[]\n    onSelect: (item: IRepository) => void\n}\n\nconst RepositoryList: React.FC<RepositoryListProps> = ({items, onSelect}) => {\n    const selectHandler = (event: React.MouseEvent, id: IRepository) => {\n        event.preventDefault()\n        onSelect(id)\n    }\n\n    if (items.length === 0) {\n        return <p className='center'>Empty</p>\n    }\n\n    return (\n        <ul>\n            {items.map(item => (\n                <li\n                    className={`cell`}\n                >\n                    <label>\n                        <span>{item.index}</span>\n                        <img className='cell-img' src={item.avatarUrl}>\n                        </img>\n                        <span className='repository-span'>{item.title}</span>\n                        <span className='repository-span'>{`star:${item.stargazers_count}`}</span>\n                        <span className='repository-span'>{`fork:${item.forks_count}`}</span>\n                    </label>\n                    <label>\n                        <span className='repository-desc' onClick={e => selectHandler(e, item)}>{item.description}</span>\n                    </label>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nexport default RepositoryList\n","import React, {useEffect, useState} from 'react'\nimport PageHeader from '../components/PageHeader'\nimport RepositoryList from '../components/RepositoryList'\nimport {IRepository} from '../models/Interfaces'\n\nvar itemArray: Array<IRepository> = []\nvar currentLanguage: string = ''\nconst RepositoryPage: React.FC = () => {\n    const [items, setItems] = useState<IRepository[]>([])\n\n    useEffect(() => {\n        fetchDataHandler().then((saved) => {\n            setItems(saved)\n        })\n    }, [])\n\n    useEffect(() => {\n        document.addEventListener('scroll', onScrollHandle);\n\n    }, [])\n\n    const fetchDataHandler = async () => {\n        localStorage.setItem('fetchData', 'repository')\n        var list: IRepository[] = [];\n        var start = itemArray.length + 1;\n        var page = itemArray.length / 30 + 1\n        const language = localStorage.getItem('language') || 'Objective-C'\n        if (currentLanguage != language) {\n            start = 1\n            page = 1\n            itemArray = []\n        }\n        currentLanguage = language\n        const response = await fetch('https://api.github.com/search/repositories?sort=stars&order=desc&page='+page+'&q=language:'+language)\n        const myJson = await response.json();\n        let i:number;\n        for (i = 0; i < myJson.items.length; i++) {\n            var item = myJson.items[i]\n            let newItem: IRepository = {\n                title: item.full_name,\n                avatarUrl: item.owner.avatar_url,\n                index: i + start,\n                description: item.description,\n                created_at: item.created_at,\n                stargazers_count: item.stargazers_count,\n                forks_count: item.forks_count\n            }\n            list[i] = newItem\n          }\n        itemArray = itemArray.concat(list);\n        return itemArray\n    }\n\n    const selectRegionHandler = (title: string) => {\n    }\n\n    const selectCellHandler = (id: IRepository) => {\n    }\n\n    const onScrollHandle = () => {\n        const windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\n        const body = document.body;\n        const html = document.documentElement;\n        const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\n        const windowBottom = windowHeight + window.pageYOffset;\n        if (windowBottom >= docHeight) {\n            fetchDataHandler().then((saved) => {\n                setItems(saved)\n            })\n        }\n    }\n\n    return (\n        <>\n            <PageHeader onSelectRegion={selectRegionHandler} showRegion={false}/>\n            <RepositoryList\n                items={items}\n                onSelect={selectCellHandler}\n            />\n        </>\n    )\n}\n\nexport default RepositoryPage\n","import React from 'react'\n\ntype PlainLineListProps = {\n    items: string[]\n    onSelect: (item: string) => void\n}\n\nconst PlainLineList: React.FC<PlainLineListProps> = ({items, onSelect}) => {\n    const selectHandler = (event: React.MouseEvent, id: string) => {\n        event.preventDefault()\n        onSelect(id)\n    }\n\n    if (items.length === 0) {\n        return <p className='center'>Empty</p>\n    }\n\n    return (\n        <ul>\n            {items.map(item => (\n                <li\n                    className={`cell`}\n                    key={item}\n                >\n                    <label>\n                        <span onClick={e => selectHandler(e, item)}>{item}</span>\n                    </label>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nexport default PlainLineList\n","import React, {useEffect, useState} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport PlainLineList from '../components/PlainLineList'\n\nconst LanguagePage: React.FC = () => {\n    const [items, setItems] = useState<string[]>([])\n    const history = useHistory()\n\n    useEffect(() => {\n        let list = setupHandler()\n        setItems(list)\n    }, [])\n\n    const setupHandler = () => {\n        return ['JavaScript', 'Java', 'PHP', 'Ruby', 'Python', 'CSS', 'CPP', 'C', 'Shell', 'HTML', 'TypeScript', 'R', 'Objective-C', 'Go', 'Swift', 'Lua', 'Vue', 'Kotlin', 'Scala', 'Perl', 'Dart', 'Rust']\n    }\n\n    const selectHandler = (id: string) => {\n        localStorage.setItem('language', id)\n        let fetchData: string = localStorage.getItem('fetchData') || 'user'\n        if (fetchData == 'user') {\n            history.push('/monkeyweb')\n        } else {\n            history.push('/monkeyweb/repository')\n        }\n    }\n\n\n    return (\n        <>\n            <PlainLineList\n                items={items}\n                onSelect={selectHandler}\n            />\n        </>\n    )\n}\n\nexport default LanguagePage\n","import React, {useEffect, useState} from 'react'\nimport PlainLineList from '../components/PlainLineList'\nimport {useHistory} from 'react-router-dom'\n\nconst LanguagePage: React.FC = () => {\n    const [items, setItems] = useState<string[]>([])\n    const history = useHistory()\n\n    useEffect(() => {\n        let list = setupHandler()\n        setItems(list)\n\n    }, [])\n\n    const setupHandler = () => {\n        return ['USA', 'UK', 'Germany', 'China', 'Canada', 'India', 'France', 'Australia', 'Other']\n\n    }\n\n    const selectHandler = (id: string) => {\n        localStorage.setItem('country', id)\n        history.push('/monkeyweb/city')\n    }\n\n    return (\n        <>\n            <PlainLineList\n                items={items}\n                onSelect={selectHandler}\n            />\n        </>\n    )\n}\n\nexport default LanguagePage\n","import React, {useEffect, useState} from 'react'\nimport PlainLineList from '../components/PlainLineList'\nimport {useHistory} from 'react-router-dom'\ninterface Citys {\n    country: string\n    city: Array<string>\n}\n\nconst LanguagePage: React.FC = () => {\n    const [items, setItems] = useState<string[]>([])\n    const history = useHistory()\n\n    useEffect(() => {\n        let list = setupHandler()\n        setItems(list)\n    }, [])\n\n    const setupHandler = () => {\n        let citys: Array<Citys> = [\n            {\n                \"country\": \"USA\",\n                \"city\":  [\"San Francisco\", \"New York\", \"Seattle\", \"Chicago\", \"Los Angeles\", \"Boston\", \"Washington\", \"San Diego\", \"San Jose\", \"Philadelphia\"],\n            },\n            {\n                \"country\": \"UK\",\n                \"city\":  [\"London\", \"Cambridge\", \"Manchester\", \"Edinburgh\", \"Bristol\", \"Birmingham\", \"Glasgow\", \"Oxford\", \"Newcastle\", \"Leeds\"],\n            },\n            {\n                \"country\": \"Germany\",\n                \"city\":  [\"Berlin\", \"Munich\", \"Hamburg\", \"Cologne\", \"Stuttgart\", \"Dresden\", \"Leipzig\"],\n            },\n            {\n                \"country\": \"China\",\n                \"city\":  [\"Beijing\", \"Shanghai\", \"Shenzhen\", \"Hangzhou\", \"Guangzhou\", \"Chengdu\", \"Nanjing\", \"Wuhan\", \"Suzhou\", \"Xiamen\", \"Tianjin\", \"Chongqing\", \"Changsha\"]\n            },\n            {\n                \"country\": \"Canada\",\n                \"city\":  [\"Toronto\", \"Vancouver\", \"Montreal\", \"ottawa\", \"Calgary\", \"Quebec\"],\n            },\n            {\n                \"country\": \"India\",\n                \"city\":  [\"Chennai\", \"Pune\", \"Hyderabad\", \"Mumbai\", \"New Delhi\", \"Noida\", \"Ahmedabad\", \"Gurgaon\", \"Kolkata\"],\n            },\n            {\n                \"country\": \"France\",\n                \"city\":  [\"paris\", \"Lyon\", \"Toulouse\", \"Nantes\"],\n            },\n            {\n                \"country\": \"Australia\",\n                \"city\":  [\"sydney\", \"Melbourne\", \"Brisbane\", \"Perth\"],\n            },\n            {\n                \"country\": \"Other\",\n                \"city\":  [\"Tokyo\", \"Moscow\", \"Singapore\", \"Seoul\"],\n            }\n        ]\n\n        let country = localStorage.getItem('country') || 'China'\n        for (var i = 0; i < citys.length; i++) {\n            if (citys[i].country == country) {\n                return citys[i].city\n            }\n        }\n        return [\"Beijing\", \"Shanghai\", \"Shenzhen\", \"Hangzhou\", \"Guangzhou\", \"Chengdu\", \"Nanjing\", \"Wuhan\", \"Suzhou\", \"Xiamen\", \"Tianjin\", \"Chongqing\", \"Changsha\"]\n    }\n\n    const selectHandler = (id: string) => {\n        localStorage.setItem('city', id)\n        let fetchData: string = localStorage.getItem('fetchData') || 'user'\n        if (fetchData == 'user') {\n            history.push('/monkeyweb')\n        } else {\n            history.push('/monkeyweb/repository')\n        }\n    }\n\n    return (\n        <>\n            <PlainLineList\n                items={items}\n                onSelect={selectHandler}\n            />\n        </>\n    )\n}\n\nexport default LanguagePage\n","import React from 'react'\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport Navbar from './components/Navbar'\nimport UserRankPage from './pages/UserRankPage'\nimport AboutPage from './pages/AboutPage'\nimport RepositoryRankPage from './pages/RepositoryRankPage'\nimport LanguagePage from './pages/LanguagePage'\nimport CountryPage from './pages/CountryPage'\nimport CityPage from './pages/CityPage'\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Navbar />\n            <div className='container'>\n                <Switch>\n                    <Route component={UserRankPage} path='/monkeyweb' exact />\n                    <Route component={RepositoryRankPage} path='/monkeyweb/repository' />\n                    <Route component={AboutPage} path='/monkeyweb/about' />\n                    <Route component={LanguagePage} path='/monkeyweb/language' />\n                    <Route component={CountryPage} path='/monkeyweb/country' />\n                    <Route component={CityPage} path='/monkeyweb/city' />\n\n                </Switch>\n            </div>\n        </BrowserRouter>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}